# -*- coding: utf-8 -*-
"""estudo_DimensionalidadeSelecaoFeature.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1MQJ5VPjkRYL7UQrzfjfeV7SkVEQrL4vn
"""

import pandas as pd

dados = pd.read_csv("/content/sample_data/drug200.csv")

dados.head()

mapa = {"Age": "Idade", "Sex": "Sexo", "BP": "Pressao", "Cholesterol": "Colesterol", "Na_to_K": "Sodio_Potassio", "Drug": "Droga"}
dados = dados.rename(columns=mapa)
dados

troca = {"F": 0, "M": 1}
dados.Sexo = dados.Sexo.map(troca)
dados.head()

features = dados.drop("Droga", axis=1)
result = dados.Droga

from pandas import get_dummies
features_v2 = get_dummies(features)
features_v2.head()

dados_v2 = pd.concat([features_v2, result], axis=1)
dados_v2.head()

from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
import numpy as np
treino_x, teste_x, treino_y, teste_y = train_test_split(features_v2, result, test_size=0.25, stratify=result)
SEED = 123
np.random.seed = SEED
tree = RandomForestClassifier(n_estimators=100)
tree.fit(treino_x, treino_y)
predicao = tree.score(teste_x, teste_y)
print (f"A predicao foi {predicao *100} %")

from sklearn.dummy import DummyClassifier
bobo = DummyClassifier(strategy = "most_frequent")
bobo.fit(treino_x, treino_y)
predicao_boba = bobo.score(teste_x, teste_y)
predicao_boba * 100

from sklearn.feature_selection import SelectKBest
from sklearn.feature_selection import chi2
selecionador = SelectKBest(chi2, k=5)
selecionador.fit(treino_x, treino_y)
treinox_kbest = selecionador.transform(treino_x)
testex_kbest = selecionador.transform(teste_x)
features_v2.shape

tree = RandomForestClassifier(n_estimators=100)
tree.fit(treinox_kbest, treino_y)
predicao = tree.score(testex_kbest, teste_y)
print (f"A predicao foi {predicao *100} %")

from sklearn.feature_selection import RFE
rfe = RFE(estimator=tree, n_features_to_select=5, step=1)
rfe.fit(treino_x, treino_y)
treinox_rfe = rfe.transform(treino_x)
testex_rfe = rfe.transform(teste_x)

tree = RandomForestClassifier(n_estimators=100)
tree.fit(treinox_rfe, treino_y)
predicao = tree.score(testex_rfe, teste_y)
print (f"A predicao foi {predicao *100} %")

from sklearn.decomposition import PCA
pca = PCA(n_components=2)
dados_pca = pca.fit_transform(features_v2)

import seaborn as sns
sns.scatterplot(x=dados_pca[:,0], y=dados_pca[:,1], hue=result)

from sklearn.manifold import TSNE
tsne = TSNE(n_components = 2)
dados_tsne = tsne.fit_transform(features_v2)

import seaborn as sns
sns.scatterplot(x=dados_tsne[:,0], y=dados_tsne[:,1], hue=result)

from sklearn.preprocessing import StandardScaler
scaler = StandardScaler()
features_v3 = scaler.fit_transform(features_v2)
features_v3

features_v3 = pd.DataFrame(features_v3, columns=[features_v2])
features_v3

dados_v3 = pd.concat([features_v3, result], axis=1)
dados_v3

from sklearn.manifold import TSNE
tsne = TSNE(n_components=2)
dados_tsne = tsne.fit_transform(features_v3)
sns.scatterplot(x=dados_tsne[:,0], y=dados_tsne[:,1], hue = result)

